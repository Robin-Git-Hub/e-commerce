{"ast":null,"code":"var _jsxFileName = \"/home/crochet/Bureau/Site E-commerce/client/src/lib/hooks/useAuthentication/index.js\";\nimport * as Realm from \"realm-web\";\nimport { app } from '../../service/mongoDB-sdk';\nimport { addUser } from \"../../service\";\nimport { handleLogin, handleLogout, handleAuthErrors } from '../../state/actions/authentication';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    const userProfile = {\n      first: newUser.first,\n      last: newUser.last,\n      email: newUser.email,\n      city: /*#__PURE__*/_jsxDEV(\"newUser\", {\n        className: \"country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 19\n      }, this)\n    };\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        app.logIn(credentials).then(user => {\n          addUser(newUser);\n          dispatch(handleLogin(newUser));\n          resolve(user);\n        });\n      }).catch(err => dispatch(handleAuthErrors(err)));\n    });\n  }\n\n  async function handleUserLogout() {\n    var _app$currentUser;\n\n    console.dir(app.currentUser);\n    (_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut().then(console.log(\"user successfully log out\")).catch(err => console.log(err));\n  }\n\n  async function handleUserLogin(email, password) {\n    return new Promise(resolve => {\n      app.logIn(Realm.Credentials.emailPassword(email, password)).then(async () => {\n        //verify current user\n        const currentUser = await app.currentUser;\n        resolve(currentUser);\n        dispatch(handleLogin(currentUser)); //retireve user profile\n        // getUser(currentUser.mail)\n        //.then(userProfile => {\n        // dispatch(handleLogin(userProfile))\n        // })\n      });\n    });\n  }\n\n  async function handleAuthentication() {\n    const currenUser = await app.currentUser; // getUser(currentUser?.email)\n    // .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\n    // .catch(err => dispatch(handleAuthenticationError(err)))\n  }\n\n  return {\n    handleUserRegistration,\n    handleUserLogout,\n    handleAuthentication,\n    handleUserLogin\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["/home/crochet/Bureau/Site E-commerce/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","app","addUser","handleLogin","handleLogout","handleAuthErrors","useAuthentication","dispatch","handleUserRegistration","newUser","userProfile","first","last","email","city","Promise","resolve","emailPasswordAuth","registerUser","password","then","credentials","Credentials","emailPassword","logIn","user","catch","err","handleUserLogout","console","dir","currentUser","logOut","log","handleUserLogin","handleAuthentication","currenUser"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AACA,SAASC,GAAT,QAAmB,2BAAnB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,gBAApC,QAA4D,oCAA5D;;;AAEA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACpC,WAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AAGrC,UAAMC,WAAW,GAAG;AAChBC,MAAAA,KAAK,EAAGF,OAAO,CAACE,KADA;AAEhBC,MAAAA,IAAI,EAAEH,OAAO,CAACG,IAFE;AAGhBC,MAAAA,KAAK,EAAEJ,OAAO,CAACI,KAHC;AAIhBC,MAAAA,IAAI,eAAE;AAAS,QAAA,SAAS,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA;AAJU,KAApB;AAOA,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5Bf,MAAAA,GAAG,CAACgB,iBAAJ,CACCC,YADD,CACcT,OAAO,CAACI,KADtB,EAC6BJ,OAAO,CAACU,QADrC,EAECC,IAFD,CAEM,MAAM;AACR,cAAMC,WAAW,GAAGrB,KAAK,CAACsB,WAAN,CAAkBC,aAAlB,CAChBd,OAAO,CAACI,KADQ,EAEhBJ,OAAO,CAACU,QAFQ,CAApB;AAIClB,QAAAA,GAAG,CAACuB,KAAJ,CAAUH,WAAV,EAAuBD,IAAvB,CAA6BK,IAAD,IAAU;AACnCvB,UAAAA,OAAO,CAACO,OAAD,CAAP;AACAF,UAAAA,QAAQ,CAACJ,WAAW,CAACM,OAAD,CAAZ,CAAR;AACAO,UAAAA,OAAO,CAACS,IAAD,CAAP;AACF,SAJD;AAKJ,OAZD,EAaCC,KAbD,CAaQC,GAAD,IAASpB,QAAQ,CAACF,gBAAgB,CAACsB,GAAD,CAAjB,CAbxB;AAcH,KAfM,CAAP;AAgBH;;AAED,iBAAeC,gBAAf,GAAmC;AAAA;;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY7B,GAAG,CAAC8B,WAAhB;AACA,wBAAA9B,GAAG,CAAC8B,WAAJ,sEAAiBC,MAAjB,GACCZ,IADD,CACMS,OAAO,CAACI,GAAR,CAAY,2BAAZ,CADN,EAECP,KAFD,CAEQC,GAAD,IAASE,OAAO,CAACI,GAAR,CAAYN,GAAZ,CAFhB;AAGH;;AAED,iBAAeO,eAAf,CAA+BrB,KAA/B,EAAsCM,QAAtC,EAAgD;AAC5C,WAAO,IAAIJ,OAAJ,CAAaC,OAAO,IAAI;AAC3Bf,MAAAA,GAAG,CACFuB,KADD,CACOxB,KAAK,CAACsB,WAAN,CAAkBC,aAAlB,CAAgCV,KAAhC,EAAuCM,QAAvC,CADP,EAECC,IAFD,CAEM,YAAY;AACd;AACA,cAAMW,WAAW,GAAG,MAAM9B,GAAG,CAAC8B,WAA9B;AACAf,QAAAA,OAAO,CAACe,WAAD,CAAP;AACAxB,QAAAA,QAAQ,CAACJ,WAAW,CAAC4B,WAAD,CAAZ,CAAR,CAJc,CAKd;AACA;AACI;AACI;AAEJ;AACP,OAbD;AAcH,KAfM,CAAP;AAgBH;;AAED,iBAAeI,oBAAf,GAAsC;AAClC,UAAMC,UAAU,GAAG,MAAMnC,GAAG,CAAC8B,WAA7B,CADkC,CAElC;AACA;AACA;AACH;;AAGD,SAAO;AACHvB,IAAAA,sBADG;AAEHoB,IAAAA,gBAFG;AAGHO,IAAAA,oBAHG;AAIHD,IAAAA;AAJG,GAAP;AAMH,CArED;;AAsEA,eAAe5B,iBAAf","sourcesContent":["import * as Realm from \"realm-web\";\nimport { app }from '../../service/mongoDB-sdk'\nimport { addUser } from \"../../service\";\nimport { handleLogin, handleLogout, handleAuthErrors } from '../../state/actions/authentication'\n\nconst useAuthentication = (dispatch) => {\n    function handleUserRegistration(newUser) {\n\n        \n        const userProfile = {\n            first : newUser.first,\n            last: newUser.last,\n            email: newUser.email,\n            city: <newUser className=\"country\"></newUser>\n        }\n\n        return new Promise((resolve) => {\n            app.emailPasswordAuth\n            .registerUser(newUser.email, newUser.password)\n            .then(() => {\n                const credentials = Realm.Credentials.emailPassword(\n                    newUser.email,\n                    newUser.password\n                );\n                 app.logIn(credentials).then((user) => {\n                    addUser(newUser)\n                    dispatch(handleLogin(newUser));\n                    resolve(user);  \n                 });\n            })\n            .catch((err) => dispatch(handleAuthErrors(err)));\n        });\n    }\n\n    async function handleUserLogout () {\n        console.dir(app.currentUser);\n        app.currentUser?.logOut()\n        .then(console.log(\"user successfully log out\"))\n        .catch((err) => console.log(err));\n    }\n\n    async function handleUserLogin(email, password) {\n        return new Promise((resolve => {\n            app\n            .logIn(Realm.Credentials.emailPassword(email, password))\n            .then(async () => {\n                //verify current user\n                const currentUser = await app.currentUser;\n                resolve(currentUser);\n                dispatch(handleLogin(currentUser));\n                //retireve user profile\n                // getUser(currentUser.mail)\n                    //.then(userProfile => {\n                        // dispatch(handleLogin(userProfile))\n\n                    // })\n            })\n        }))\n    }\n\n    async function handleAuthentication() {\n        const currenUser = await app.currentUser;\n        // getUser(currentUser?.email)\n        // .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\n        // .catch(err => dispatch(handleAuthenticationError(err)))\n    }\n    \n\n    return {\n        handleUserRegistration,\n        handleUserLogout,\n        handleAuthentication,\n        handleUserLogin\n    };\n};\nexport default useAuthentication;"]},"metadata":{},"sourceType":"module"}