{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { app } from '../../service/mongoDB-sdk';\nimport { handleLogin, handleLogout, handleAuthErrors } from '../../state/actions/authentication';\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        app.logIn(credentials).then(user => {\n          dispatch(handleLogin(newUser));\n          resolve(user);\n        });\n      }).catch(err => dispatch(handleAuthErrors(err)));\n    });\n  }\n\n  async function handleUserLogout() {\n    var _app$currentUser;\n\n    console.dir(app.currentUser);\n    (_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut().then(console.log(\"user successfully log out\")).catch(err => console.log(err));\n  }\n\n  async function handleUserLogin(dispatch, email, password) {\n    return new Promise(resolve => {\n      app.logIn(Realm.Credentials.emailPassword(email, password)).then(async () => {\n        //verify current user\n        const currentUser = await app.currentUser;\n      });\n    });\n  }\n\n  async function handleAuthentication() {\n    const currenUser = await app.currentUser; // getUser(currentUser?.email)\n    // .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\n    // .catch(err => dispatch(handleAuthenticationError(err)))\n  }\n\n  return {\n    handleUserRegistration,\n    handleUserLogout,\n    handleAuthentication\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["/home/crochet/Bureau/Site E-commerce/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","app","handleLogin","handleLogout","handleAuthErrors","useAuthentication","dispatch","handleUserRegistration","newUser","Promise","resolve","emailPasswordAuth","registerUser","email","password","then","credentials","Credentials","emailPassword","logIn","user","catch","err","handleUserLogout","console","dir","currentUser","logOut","log","handleUserLogin","handleAuthentication","currenUser"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AACA,SAASC,GAAT,QAAmB,2BAAnB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,gBAApC,QAA4D,oCAA5D;;AAEA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACpC,WAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AACrC,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5BT,MAAAA,GAAG,CAACU,iBAAJ,CACCC,YADD,CACcJ,OAAO,CAACK,KADtB,EAC6BL,OAAO,CAACM,QADrC,EAECC,IAFD,CAEM,MAAM;AACR,cAAMC,WAAW,GAAGhB,KAAK,CAACiB,WAAN,CAAkBC,aAAlB,CAChBV,OAAO,CAACK,KADQ,EAEhBL,OAAO,CAACM,QAFQ,CAApB;AAICb,QAAAA,GAAG,CAACkB,KAAJ,CAAUH,WAAV,EAAuBD,IAAvB,CAA6BK,IAAD,IAAU;AACnCd,UAAAA,QAAQ,CAACJ,WAAW,CAACM,OAAD,CAAZ,CAAR;AACAE,UAAAA,OAAO,CAACU,IAAD,CAAP;AACF,SAHD;AAIJ,OAXD,EAYCC,KAZD,CAYQC,GAAD,IAAShB,QAAQ,CAACF,gBAAgB,CAACkB,GAAD,CAAjB,CAZxB;AAaH,KAdM,CAAP;AAeH;;AAED,iBAAeC,gBAAf,GAAmC;AAAA;;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAYxB,GAAG,CAACyB,WAAhB;AACA,wBAAAzB,GAAG,CAACyB,WAAJ,sEAAiBC,MAAjB,GACCZ,IADD,CACMS,OAAO,CAACI,GAAR,CAAY,2BAAZ,CADN,EAECP,KAFD,CAEQC,GAAD,IAASE,OAAO,CAACI,GAAR,CAAYN,GAAZ,CAFhB;AAGH;;AAED,iBAAeO,eAAf,CAA+BvB,QAA/B,EAAyCO,KAAzC,EAAgDC,QAAhD,EAA0D;AACtD,WAAO,IAAIL,OAAJ,CAAaC,OAAO,IAAI;AAC3BT,MAAAA,GAAG,CACFkB,KADD,CACOnB,KAAK,CAACiB,WAAN,CAAkBC,aAAlB,CAAgCL,KAAhC,EAAuCC,QAAvC,CADP,EAECC,IAFD,CAEM,YAAY;AACd;AACA,cAAMW,WAAW,GAAG,MAAMzB,GAAG,CAACyB,WAA9B;AAEH,OAND;AAOH,KARM,CAAP;AASH;;AAED,iBAAeI,oBAAf,GAAsC;AAClC,UAAMC,UAAU,GAAG,MAAM9B,GAAG,CAACyB,WAA7B,CADkC,CAElC;AACA;AACA;AACH;;AAGD,SAAO;AACHnB,IAAAA,sBADG;AAEHgB,IAAAA,gBAFG;AAGHO,IAAAA;AAHG,GAAP;AAKH,CAnDD;;AAoDA,eAAezB,iBAAf","sourcesContent":["import * as Realm from \"realm-web\";\nimport { app }from '../../service/mongoDB-sdk'\nimport { handleLogin, handleLogout, handleAuthErrors } from '../../state/actions/authentication'\n\nconst useAuthentication = (dispatch) => {\n    function handleUserRegistration(newUser) {\n        return new Promise((resolve) => {\n            app.emailPasswordAuth\n            .registerUser(newUser.email, newUser.password)\n            .then(() => {\n                const credentials = Realm.Credentials.emailPassword(\n                    newUser.email,\n                    newUser.password\n                );\n                 app.logIn(credentials).then((user) => {\n                    dispatch(handleLogin(newUser));\n                    resolve(user);  \n                 });\n            })\n            .catch((err) => dispatch(handleAuthErrors(err)));\n        });\n    }\n\n    async function handleUserLogout () {\n        console.dir(app.currentUser);\n        app.currentUser?.logOut()\n        .then(console.log(\"user successfully log out\"))\n        .catch((err) => console.log(err));\n    }\n\n    async function handleUserLogin(dispatch, email, password) {\n        return new Promise((resolve => {\n            app\n            .logIn(Realm.Credentials.emailPassword(email, password))\n            .then(async () => {\n                //verify current user\n                const currentUser = await app.currentUser;\n\n            })\n        }))\n    }\n\n    async function handleAuthentication() {\n        const currenUser = await app.currentUser;\n        // getUser(currentUser?.email)\n        // .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\n        // .catch(err => dispatch(handleAuthenticationError(err)))\n    }\n    \n\n    return {\n        handleUserRegistration,\n        handleUserLogout,\n        handleAuthentication\n    };\n};\nexport default useAuthentication;"]},"metadata":{},"sourceType":"module"}