{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { app } from '../../service/mongoDB-sdk';\nimport { handleLogin, handle } from '../../state/actions/authentication';\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        resolve();\n        app.logIn(credentials).then(user => {\n          resolve(user);\n        });\n      });\n    });\n  }\n\n  return {\n    handleUserRegistration\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["/home/crochet/Bureau/Site E-commerce/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","app","handleLogin","handle","useAuthentication","dispatch","handleUserRegistration","newUser","Promise","resolve","emailPasswordAuth","registerUser","email","password","then","credentials","Credentials","emailPassword","logIn","user"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AACA,SAASC,GAAT,QAAmB,2BAAnB;AACA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,oCAApC;;AAEA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACpC,WAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AACrC,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5BR,MAAAA,GAAG,CAACS,iBAAJ,CACCC,YADD,CACcJ,OAAO,CAACK,KADtB,EAC6BL,OAAO,CAACM,QADrC,EAECC,IAFD,CAEM,MAAM;AACR,cAAMC,WAAW,GAAGf,KAAK,CAACgB,WAAN,CAAkBC,aAAlB,CAChBV,OAAO,CAACK,KADQ,EAEhBL,OAAO,CAACM,QAFQ,CAApB;AAIAJ,QAAAA,OAAO;AACNR,QAAAA,GAAG,CAACiB,KAAJ,CAAUH,WAAV,EAAuBD,IAAvB,CAA6BK,IAAD,IAAU;AACnCV,UAAAA,OAAO,CAACU,IAAD,CAAP;AACF,SAFD;AAGJ,OAXD;AAYH,KAbM,CAAP;AAcH;;AACD,SAAO;AACHb,IAAAA;AADG,GAAP;AAGH,CApBD;;AAqBA,eAAeF,iBAAf","sourcesContent":["import * as Realm from \"realm-web\";\nimport { app }from '../../service/mongoDB-sdk'\nimport { handleLogin, handle } from '../../state/actions/authentication'\n\nconst useAuthentication = (dispatch) => {\n    function handleUserRegistration(newUser) {\n        return new Promise((resolve) => {\n            app.emailPasswordAuth\n            .registerUser(newUser.email, newUser.password)\n            .then(() => {\n                const credentials = Realm.Credentials.emailPassword(\n                    newUser.email,\n                    newUser.password\n                );\n                resolve();\n                 app.logIn(credentials).then((user) => {\n                    resolve(user);  \n                 });\n            });\n        });\n    }\n    return {\n        handleUserRegistration,\n    };\n};\nexport default useAuthentication;"]},"metadata":{},"sourceType":"module"}