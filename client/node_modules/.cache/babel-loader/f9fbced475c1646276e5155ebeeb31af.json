{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { addUser, getUser } from \"../../service\";\nimport { app } from \"../../service/mongoDB-sdk\";\nimport { handleLogin, handleLogout, handleAuthenticationErrors } from \"../../state/actions/authentication\";\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    const userProfile = { ...newUser,\n      password: undefined,\n      confirm_password: undefined\n    };\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        app.logIn(credentials).then(user => {\n          addUser(userProfile);\n          dispatch(handleLogin(userProfile));\n          resolve(user);\n        });\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleUserLogout() {\n    var _app$currentUser;\n\n    console.dir(app.currentUser);\n    (_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut().then(() => {\n      dispatch(handleLogout());\n      console.log(\"user successfully log out\");\n    }).catch(err => console.log(err));\n  }\n\n  async function handleUserLogin(email, password) {\n    return new Promise(resolve => {\n      app.logIn(Realm.Credentials.emailPassword(email, password)).then(async () => {\n        // verify current user\n        const currentUser = await app.currentUser; // retrieve user profile\n\n        getUser(currentUser).then(userProfile => {\n          dispatch(handleLogin(userProfile));\n          resolve(userProfile);\n        });\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleAuthentication() {\n    const currentUser = await app.currentUser;\n    getUser(currentUser).then(userProfile => dispatch(handleLogin(userProfile))).catch(err => dispatch(handleAuthenticationErrors(err)));\n  }\n\n  return {\n    handleUserRegistration,\n    handleUserLogout,\n    handleUserLogin,\n    handleAuthentication\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["/home/crochet/Bureau/Site E-commerce/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","addUser","getUser","app","handleLogin","handleLogout","handleAuthenticationErrors","useAuthentication","dispatch","handleUserRegistration","newUser","userProfile","password","undefined","confirm_password","Promise","resolve","emailPasswordAuth","registerUser","email","then","credentials","Credentials","emailPassword","logIn","user","catch","err","handleUserLogout","console","dir","currentUser","logOut","log","handleUserLogin","handleAuthentication"],"mappings":"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","sourcesContent":["import * as Realm from \"realm-web\";\nimport { addUser, getUser } from \"../../service\";\nimport { app } from \"../../service/mongoDB-sdk\";\nimport {\n  handleLogin,\n  handleLogout,\n  handleAuthenticationErrors,\n} from \"../../state/actions/authentication\";\n\nconst useAuthentication = (dispatch) => {\n  function handleUserRegistration(newUser) {\n    const userProfile = {\n      ...newUser,\n      password: undefined,\n      confirm_password: undefined,\n    };\n    return new Promise((resolve) => {\n      app.emailPasswordAuth\n        .registerUser(newUser.email, newUser.password)\n        .then(() => {\n          const credentials = Realm.Credentials.emailPassword(\n            newUser.email,\n            newUser.password\n          );\n          app.logIn(credentials).then((user) => {\n            addUser(userProfile);\n            dispatch(handleLogin(userProfile));\n            resolve(user);\n          });\n        })\n        .catch((err) => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n  async function handleUserLogout() {\n    console.dir(app.currentUser);\n    app.currentUser\n      ?.logOut()\n      .then(() => {\n        dispatch(handleLogout());\n        console.log(\"user successfully log out\");\n      })\n      .catch((err) => console.log(err));\n  }\n  async function handleUserLogin(email, password) {\n    return new Promise((resolve) => {\n      app\n        .logIn(Realm.Credentials.emailPassword(email, password))\n        .then(async () => {\n          // verify current user\n          const currentUser = await app.currentUser;\n          // retrieve user profile\n          getUser(currentUser).then((userProfile) => {\n            dispatch(handleLogin(userProfile));\n            resolve(userProfile);\n          });\n        })\n        .catch((err) => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleAuthentication() {\n    const currentUser = await app.currentUser;\n    getUser(currentUser)\n      .then((userProfile) => dispatch(handleLogin(userProfile)))\n      .catch((err) => dispatch(handleAuthenticationErrors(err)));\n  }\n\n  return {\n    handleUserRegistration,\n    handleUserLogout,\n    handleUserLogin,\n    handleAuthentication,\n  };\n};\nexport default useAuthentication;\n"]},"metadata":{},"sourceType":"module"}